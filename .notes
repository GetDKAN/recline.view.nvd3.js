###	recline.View.nvd3.Base
allow override x and y getters

###	recline.View.nvd3.LineChart
[
	{values: [{x:1, y:1 }], key: 'Name of serie', color:'#cccccc'},
	{values: [{x:1, y:1 }], key: 'Name of serie', color:'#cccccc'}
]

###	recline.View.nvd3.scatterChart
[
	{values: [{x:1, y:1, size: 20, shape: 'circle'}], key: 'Name of serie'},
	{values: [{x:1, y:1, size: 20, shape: 'circle'}], key: 'Name of serie'}
]

###	recline.View.nvd3.stackedAreaChart
[
	{values: [{x:1, y:1 }], key: 'Name of serie'},
	{values: [{x:1, y:1 }], key: 'Name of serie'}
]

###	recline.View.nvd3.discreteBarChart
[
	{values: [{x:1, y:1 }], key: 'Name of serie'},
	{values: [{x:1, y:1 }], key: 'Name of serie'}
]

###	recline.View.nvd3.multiBarHorizontalChart
[
	{values: [{x:1, y:1 }], key: 'Name of serie', color:'#cccccc'},
	{values: [{x:1, y:1 }], key: 'Name of serie 2', color:'#cccccc'}
]

###	recline.View.nvd3.linePlusBarChart
[
	{values: [{nv.addGraph(function() {
  var chart = nv.models.lineWithFocusChart();

  chart.xAxis
      .tickFormat(d3.format(',f'));

  chart.yAxis
      .tickFormat(d3.format(',.2f'));

  chart.y2Axis
      .tickFormat(d3.format(',.2f'));

  d3.select('#chart svg')
      .datum(testData())
      .transition().duration(500)
      .call(chart);

  nv.utils.windowResize(chart.update);

  return chart;
});
/**************************************
 * Simple test data generator
 */

function testData() {
  return stream_layers(3,128,.1).map(function(data, i) {
    return {
      key: 'Stream' + i,
      values: data
    };
  });
}

/* Inspired by Lee Byron's test data generator. */
function stream_layers(n, m, o) {
  if (arguments.length < 3) o = 0;
  function bump(a) {
    var x = 1 / (.1 + Math.random()),
        y = 2 * Math.random() - .5,
        z = 10 / (.1 + Math.random());
    for (var i = 0; i < m; i++) {
      var w = (i / m - y) * z;
      a[i] += x * Math.exp(-w * w);
    }
  }
  return d3.range(n).map(function() {
      var a = [], i;
      for (i = 0; i < m; i++) a[i] = o + o * Math.random();
      for (i = 0; i < 5; i++) bump(a);
      return a.map(stream_index);
    });
}

/* Another layer generator using gamma distributions. */
function stream_waves(n, m) {
  return d3.range(n).map(function(i) {
    return d3.range(m).map(function(j) {
        var x = 20 * j / m - i / 3;
        return 2 * x * Math.exp(-.5 * x);
      }).map(stream_index);
    });
}

function stream_index(d, i) {
  return {x: i, y: Math.max(0, d)};
}x:1, y:1 }], key: 'Name of serie', color:'#cccccc', bar: true},
	{values: [{x:1, y:1 }], key: 'Name of serie 2', color:'#cccccc'}
]

###	recline.View.nvd3.multiBarChart
[
	{values: [{x:1, y:1 }], key: 'Name of serie', color:'#cccccc'},
	{values: [{x:1, y:1 }], key: 'Name of serie 2', color:'#cccccc'}
]

###	recline.View.nvd3.cumulativeLineChart
[
	{values: [{x:1, y:1 }], key: 'Name of serie', color:'#cccccc'},
	{values: [{x:1, y:1 }], key: 'Name of serie 2', color:'#cccccc'}
]

###	recline.View.nvd3.lineWithFocusChart
[
	{values: [{x:1, y:1 }], key: 'Name of serie', color:'#cccccc'},
	{values: [{x:1, y:1 }], key: 'Name of serie 2', color:'#cccccc'}
]

###	recline.View.nvd3.pieChart
[
	{x: 1, y: 1},
	{x: 1, y: 1}
]


Quiero comparar columnas o todos los valores posibles de una columna?